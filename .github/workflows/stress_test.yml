name: Stress test on large problems

on:
  # Trigger the workflow on push or pull request
  #push:
  pull_request:  # DANGEROUS! MUST be disabled for self-hosted runners!
  # Trigger the workflow by cron. The default time zone of GitHub Actions is UTC.
  schedule:
    - cron: '0 10 * * *'
  # Trigger the workflow manually
  workflow_dispatch:

env:
  GFORTRAN_VERSION: 12

jobs:
  stress_test:
    name: Stress test of PRIMA on large problem.
    runs-on: ${{ matrix.os }}
    continue-on-error: true
    timeout-minutes: 1
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        matlab: [latest]
        solver: [cobyla, uobyqa, newuoa, bobyqa, lincoa]
        test: [normal, tough]

    steps:
      - name: Check out repository
        uses: actions/checkout@v3.5.3
        with:
          ssh-key: ${{ secrets.SSH_PRIVATE_KEY_ACT }} # This forces checkout to use SSH, not HTTPS
          submodules: recursive

      - name: Link gfortran for MATLAB on Linux
        if: startsWith(matrix.os, 'ubuntu')
        run: bash .github/scripts/link_gfortran ${{ env.GFORTRAN_VERSION }}

      - name: Cache MATLAB  # N.B.: Clear the cache when the `latest` version of MATLAB changes in March and September
        uses: actions/cache@v3.3.1
        with:
          path: ${{ runner.tool_cache }}/MATLAB
          key: ${{ matrix.os }}-${{ matrix.matlab }}-yes

      - name: Set up MATLAB with optimization toolbox
        uses: matlab-actions/setup-matlab@v2-beta
        with:
          release: ${{ matrix.matlab }}
          products: Optimization_Toolbox

      - name: Conduct the test
        uses: matlab-actions/run-command@v1.2.0
        with:
          command: |
            ver;
            root_dir = pwd();
            cd(fullfile(root_dir, 'matlab/tests'));
            options = struct();
            options.tough = strcmp('${{ matrix.test }}', 'tough');
            stress('${{ matrix.solver }}', options);

  check_timeout:
    runs-on: ubuntu-latest
    if: ${{ !cancelled() }}
    needs: test
    steps:
      - name: Install jq
        run: sudo apt update && sudo apt install -y jq
      - name: check workflow jobs
        run: |
          # Set maximum running time of the stress tests
          MAX_RUNTIME_SECONDS=$((300*60))

          # Fetch the jobs for the current workflow run using the GitHub API
          response=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
          -H "Accept: application/vnd.github+json" \
          "https://api.github.com/repos/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID/jobs")

          # Loop through all the stress_test jobs
          all_successful_or_overtime=true
          jobs_length=$(echo "$response" | jq ' .jobs | length')
          for ((i=0; i<jobs_length; i++)); do
              job=$(echo "$response" | jq ".jobs[$i]")

              # Check if the job has the name "stress_test"
              job_name=$(echo "$job" | jq -r '.name')
              if [[ "$job_name" != "stress_test" ]]; then
                  continue
              fi

              # Extract the conclusion and timestamps of the current stress_test job
              conclusion=$(echo "$job" | jq -r '.conclusion')
              started_at=$(echo "$job" | jq -r '.started_at')
              completed_at=$(echo "$job" | jq -r '.completed_at')
              echo $conclusion

              # Calculate the running time of the job
              start_time=$(date --utc --date "$started_at" +%s)
              end_time=$(date --utc --date "$completed_at" +%s)
              runtime=$((end_time - start_time))
              echo $runtime

              # Check if the conclusion is success or cancelled due to overtime
              if [[ "$conclusion" == "success" ]]; then
                  continue
              elif [[ "$conclusion" == "cancelled" ]] && [[ "$runtime" -ge "$MAX_RUNTIME_SECONDS" ]]; then
                  continue
              else
                  all_successful_or_overtime=false
              break
              fi
          done

          # Determine the final status of the workflow
          if [[ "$all_successful_or_overtime" == true ]]; then
              echo "All stress tests are successful or cancelled due to overtime. The workflow is successful."
              exit 0
          else
              echo "Some stress tests are unsuccessfully or cancelled not due to overtime. The workflow is unsuccessful."
              exit 42
          fi

          # curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          # -H "Accept: application/vnd.github.v3+json" \
          # https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/jobs \
          # > jobs.json
          # status=$(jq '.jobs[0].conclusion' jobs.json)
          # end_time=$(date -u -d "$completed_at" +%s)
          # start_time=$(date -u -d "$started_at" +%s)
          # duration=$((end_time - start_time))
          # timeout_seconds=$((350 * 60 - 600)) # 350 minutes in seconds (minus 600)
          # status=${status//\"/}  # It turns out that $status is "failure", including the quotation marks.
          # echo $status
          # if [[ $status == "failure" ]]; then
          #    echo "Workflow failed before timeout"
          #    exit 1
          # elif [[ $status == "cancelled" ]]; then
          #   if [[ $duration -ge $timeout_seconds ]]; then
          #        echo "Workflow timed out but considered successful"
          #        exit 0
          #    else
          #        echo "Workflow was cancelled due to other reasons"
          #        exit 2
          #    fi
          # else
          #    echo "Workflow completed successfully"
          #    exit 0
          # fi
